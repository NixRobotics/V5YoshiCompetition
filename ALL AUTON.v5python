{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nleft_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_motor_b = Motor(Ports.PORT4, GearSetting.RATIO_18_1, False)\nleft_drive_smart = MotorGroup(left_motor_a, left_motor_b)\nright_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, True)\nright_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nright_drive_smart = MotorGroup(right_motor_a, right_motor_b)\ndrivetrain_inertial = Inertial(Ports.PORT11)\ndrivetrain = SmartDrive(left_drive_smart, right_drive_smart, drivetrain_inertial, 319.19, 320, 40, MM, 1)\ncontroller_1 = Controller(PRIMARY)\narmmotor = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nbeltmotor = Motor(Ports.PORT7, GearSetting.RATIO_18_1, True)\nCatchMotor = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\nvexcode_initial_drivetrain_calibration_completed = False\ndef calibrate_drivetrain():\n    # Calibrate the Drivetrain Inertial\n    global vexcode_initial_drivetrain_calibration_completed\n    sleep(200, MSEC)\n    brain.screen.print(\"Calibrating\")\n    brain.screen.next_row()\n    brain.screen.print(\"Inertial\")\n    drivetrain_inertial.calibrate()\n    while drivetrain_inertial.is_calibrating():\n        sleep(25, MSEC)\n    vexcode_initial_drivetrain_calibration_completed = True\n    brain.screen.clear_screen()\n    brain.screen.set_cursor(1, 1)\n\n\n# Calibrate the Drivetrain\ncalibrate_drivetrain()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n\n\n# define variables used for controlling motors based on controller inputs\ncontroller_1_left_shoulder_control_motors_stopped = True\ncontroller_1_right_shoulder_control_motors_stopped = True\ndrivetrain_needs_to_be_stopped_controller_1 = False\n\n# define a task that will handle monitoring inputs from controller_1\ndef rc_auto_loop_function_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n    while True:\n        if remote_control_code_enabled:\n            # stop the motors if the brain is calibrating\n            if drivetrain_inertial.is_calibrating():\n                left_drive_smart.stop()\n                right_drive_smart.stop()\n                while drivetrain_inertial.is_calibrating():\n                    sleep(25, MSEC)\n            \n            # calculate the drivetrain motor velocities from the controller joystick axies\n            # left = axis3 + axis4\n            # right = axis3 - axis4\n            drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n            drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n            \n            # check if the values are inside of the deadband range\n            if abs(drivetrain_left_side_speed) < 5 and abs(drivetrain_right_side_speed) < 5:\n                # check if the motors have already been stopped\n                if drivetrain_needs_to_be_stopped_controller_1:\n                    # stop the drive motors\n                    left_drive_smart.stop()\n                    right_drive_smart.stop()\n                    # tell the code that the motors have been stopped\n                    drivetrain_needs_to_be_stopped_controller_1 = False\n            else:\n                # reset the toggle so that the deadband code knows to stop the motors next\n                # time the input is in the deadband range\n                drivetrain_needs_to_be_stopped_controller_1 = True\n            \n            # only tell the left drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)\n                left_drive_smart.spin(FORWARD)\n            # only tell the right drive motor to spin if the values are not in the deadband range\n            if drivetrain_needs_to_be_stopped_controller_1:\n                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)\n                right_drive_smart.spin(FORWARD)\n            # check the buttonL1/buttonL2 status\n            # to control armmotor\n            if controller_1.buttonL1.pressing():\n                armmotor.spin(FORWARD)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif controller_1.buttonL2.pressing():\n                armmotor.spin(REVERSE)\n                controller_1_left_shoulder_control_motors_stopped = False\n            elif not controller_1_left_shoulder_control_motors_stopped:\n                armmotor.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_left_shoulder_control_motors_stopped = True\n            # check the buttonR1/buttonR2 status\n            # to control beltmotor\n            if controller_1.buttonR1.pressing():\n                beltmotor.spin(FORWARD)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif controller_1.buttonR2.pressing():\n                beltmotor.spin(REVERSE)\n                controller_1_right_shoulder_control_motors_stopped = False\n            elif not controller_1_right_shoulder_control_motors_stopped:\n                beltmotor.stop()\n                # set the toggle so that we don't constantly tell the motor to stop when\n                # the buttons are released\n                controller_1_right_shoulder_control_motors_stopped = True\n        # wait before repeating the process\n        wait(20, MSEC)\n\n# define variable for remote controller enable/disable\nremote_control_code_enabled = True\n\nrc_auto_loop_thread_controller_1 = Thread(rc_auto_loop_function_controller_1)\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nremote_control_code_enabled = False\n\n# motors will slow down above certain temperatures\n# vex defines warm as 50 percent and 70 percent\nMOTOR_HOT_TEMP = 70\nMOTOR_WARM_TEMP = 50\n\n\n# this function checks the temperature of each motor and then return two values: warm, hot\ndef motor_temperature():\n   # to make code simple we create a list of all the motors, then check each one\n   allmotors = [left_motor_a, left_motor_b, right_motor_a, right_motor_b, armmotor, beltmotor]\n   motor_is_warm = False\n   motor_is_hot = False\n   for motor in allmotors:\n       if motor.temperature(PERCENT) >= MOTOR_HOT_TEMP: motor_is_hot = True\n       elif motor.temperature(PERCENT) >= MOTOR_WARM_TEMP: motor_is_warm = True\n\n\n   return motor_is_warm, motor_is_hot\n\n\n# we run this in its own thread to monitor the temperature each second and change the color of the screen\n# blue is wam\n# red is hot\ndef monitor_motor_temperatures():\n   while True:\n       motor_is_warm, motor_is_hot = motor_temperature()\n       if (motor_is_hot): brain.screen.clear_screen(Color.RED)\n       elif (motor_is_warm): brain.screen.clear_screen(Color.BLUE)\n       wait(1,SECONDS)\n\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\nremote_control_code_enabled = False\n#constant for controller deadban\nCONRTROLLER_DEADBAN = 5\n\ndef drivetrain_detwitch(speed, turn):   \n   # reduce turn sensitiviy when robot is moving slowly (turning in place)\n   speedmixLim = 50.0 # upper limit of throttle mixing (above this point, full turn allowed)\n   # NOTE: Next 2 parameters should add up to 1.0 (throttlemixMinSens + throttlemixSlope = 1.0)\n   speedmixMinSens = 0.35 # minimum turn sensitivity point (i.e. when turning in place)\n   speedmixSlope = 0.65 # rate at which turn sensitivity increases with increased throttle\n   # turnscale will be used to change how fast we can turn based on spee\n   turnscale = 1.0 # start with full turn speed\n\n\n   if (abs(speed) < speedmixLim):\n       speedmix = abs(speed) / speedmixLim\n       turnscale = turnscale * (speedmixMinSens + speedmixSlope * speedmix)\n\n\n   turn = turn * turnscale\n\n\n   left_speed = speed + turn\n   right_speed = speed - turn\n\n\n   return left_speed, right_speed\n\n\n# constants to convert percent to volt for drivetrain\nMOTOR_MAXVOLT = 10.9 # volts\nMOTOR_VOLTSCALE = MOTOR_MAXVOLT / 100.0\n\ndef fx_user_drivetrain():\n    global drivetrain_needs_to_be_stopped_controller_1\n    # calculate the drivetrain motor velocities from the controller joystick axies\n    # left = axis3 + axis4\n    # right = axis3 - axis4\n    # drivetrain_left_side_speed = controller_1.axis3.position() + controller_1.axis4.position()\n    # drivetrain_right_side_speed = controller_1.axis3.position() - controller_1.axis4.position()\n    drivetrain_left_side_speed, drivetrain_right_side_speed = drivetrain_detwitch(controller_1.axis3.position(), controller_1.axis4.position())\n\n    \n    # check if the values are inside of the deadband range\n    if abs(drivetrain_left_side_speed) < CONRTROLLER_DEADBAN and abs(drivetrain_right_side_speed) < CONRTROLLER_DEADBAN:\n        # check if the motors have already been stopped\n        if drivetrain_needs_to_be_stopped_controller_1:\n            # stop the drive motors\n            left_drive_smart.stop()\n            right_drive_smart.stop()\n            # tell the code that the motors have been stopped\n            drivetrain_needs_to_be_stopped_controller_1 = False\n    else:\n    # reset the toggle so that the deadband code knows to stop the motors next\n    # time the input is in the deadband range\n        drivetrain_needs_to_be_stopped_controller_1 = True\n\n    # only tell the left drive motor to spin if the values are not in the deadband range\n    if drivetrain_needs_to_be_stopped_controller_1:\n        left_drive_smart.spin(FORWARD, drivetrain_left_side_speed * MOTOR_VOLTSCALE, VOLT)\n\n\n        # only tell the right drive motor to spin if the values are not in the deadband range\n    if drivetrain_needs_to_be_stopped_controller_1:\n        right_drive_smart.spin(FORWARD, drivetrain_right_side_speed * MOTOR_VOLTSCALE, VOLT)\n\nremote_control_code_enabled = False\n\n# constants for arm gear ratio and motion limits\nARM_GEAR_RATIO = 48.0/24.0 * 36.0/12.0\n# because of gear ratio, motor needs to spin a lot more for the arm to move by each degree\nARM_MAXIMUM_UP = 0.0 * ARM_GEAR_RATIO\nARM_MAXIMUM_DOWN = -130.0 * ARM_GEAR_RATIO\n\ndef fx_user_arm():\n\n    # process the controller input every time this function is called\n    # update the motors based on the input values\n    # calculate the arm motor velocities from the controller joystick axies\n    # up = axis 2 is negative\n    # down = axis 2 is positive\n    # note that this is opposite from the L1/L2 so we can either go to the visual code an\n    # change it or we negate the control here\n    armmotor_speed = -controller_1.axis2.position()\n\n    # check if the values are inside of the deadband range\n    if abs(armmotor_speed) < CONRTROLLER_DEADBAN:\n        armmotor_speed = 0\n    # now check if arm is at the maximum raised or lowered limit\n    elif (armmotor_speed > 0 and armmotor.position(DEGREES) >= ARM_MAXIMUM_UP):\n        armmotor_speed = 0\n    elif (armmotor_speed < 0 and armmotor.position(DEGREES) <= ARM_MAXIMUM_DOWN):\n        armmotor_speed = 0\n\n\n    if (armmotor_speed == 0):\n        armmotor.stop(HOLD)\n    else:\n        armmotor.set_velocity(armmotor_speed, PERCENT)\n        armmotor.spin(FORWARD)\n\n# constants for pusher\nPUSHER_SPROCKET_SIZE = 6 # teeth\nPUSHER_TRAVEL = 14 # chain lengths\nPUSHER_TURNS = PUSHER_TRAVEL / PUSHER_SPROCKET_SIZE # turns\n\nbelt_speed = 0\n\ndef belt_faster():\n   global belt_speed\n   if belt_speed == 0: belt_speed = 25\n   elif belt_speed == 25: belt_speed = 75\n   beltmotor.set_velocity(belt_speed,PERCENT)\n   beltmotor.spin(FORWARD)\n   \ndef belt_slower():\n   global belt_speed\n   if belt_speed > 0: belt_speed = belt_speed - 25\n   beltmotor.set_velocity(belt_speed,PERCENT)\n   beltmotor.spin(FORWARD)\n\ndef belt_stop():\n    global belt_speed\n    belt_speed = 0\n    beltmotor.stop()\n\ndef raise_catch():\n   belt_stop()\n   CatchMotor.set_velocity(100,PERCENT)\n   CatchMotor.set_stopping(HOLD) \n   CatchMotor.set_timeout(2,SECONDS) \n   CatchMotor.spin_to_position(60*9,DEGREES,wait=True)\n   CatchMotor.stop()\n\n\ndef lower_catch():\n   CatchMotor.set_velocity(100,PERCENT)\n   CatchMotor.set_stopping(HOLD) \n   CatchMotor.set_timeout(2,SECONDS) \n   CatchMotor.spin_to_position(0*9,DEGREES,wait=True)\n   CatchMotor.stop()\n\ndef release_catch():\n    CatchMotor.stop(COAST)\n\ndef controller1_buttonR1_callback():\n   belt_faster()\n\ndef controller1_buttonR2_callback():\n   belt_stop()\n\ndef controller1_buttonUp_callback():\n    raise_catch()\n    brain.screen.print(\"raise_catch\")\n\n\ndef controller1_buttonDown_callback():\n   lower_catch()\n   brain.screen.print(\"lower_catch\")\n\ndef controller1_buttonLeft_callback():\n   release_catch()\n\n# fx_user_control_loop_controller_1() does not get called anymore - DELETE\ndef fx_user_control_loop_controller_1():\n    global drivetrain_needs_to_be_stopped_controller_1, controller_1_left_shoulder_control_motors_stopped, controller_1_right_shoulder_control_motors_stopped, remote_control_code_enabled\n    # process the controller input every 20 milliseconds\n    # update the motors based on the input values\n\n    # code moved to fx_user_drivetrain()\n    # code moved to fx_user_arm()\n    # code moved to fx_user_pusher()\n\ndef user_control():\n    brain.screen.clear_screen()\n    # place driver control in this while loop\n    #fx_user_control_loop_controller_1()\n\n    # place callbacks here\n    controller_1.buttonR1.pressed(controller1_buttonR1_callback)\n    controller_1.buttonR2.pressed(controller1_buttonR2_callback)\n\n    controller_1.buttonUp.pressed(controller1_buttonUp_callback)\n    controller_1.buttonDown.pressed(controller1_buttonDown_callback)\n    controller_1.buttonLeft.pressed(controller1_buttonLeft_callback)\n\n    # check motor temperatures\n    temperature_monitor_thread = Thread(monitor_motor_temperatures)\n\n    while True:\n        fx_user_drivetrain()\n        fx_user_arm()\n        wait(20, MSEC)\n# add before autonomous()\nCONVEYOR_HOOKS = 6\nCONVEYOR_SPACING = 13\nCONVEYOR_LINKS = 21 + (CONVEYOR_HOOKS * CONVEYOR_SPACING)\nCONVEYOR_BIG_TEETH = 12\n\ndef belt_spin_one_loop(waitfordone = True):\n    belt_spin_to_first(0,0,waitfordone)\n\ndef belt_spin_to_first(hooks = 0, links = 0, waitfordone = True):\n    # note: must first fix wrong cartride for belt\n    belt_ratio = ((CONVEYOR_LINKS - hooks * CONVEYOR_SPACING - links) / CONVEYOR_BIG_TEETH)\n    beltmotor.set_velocity(85,PERCENT)\n    beltmotor.spin_for(FORWARD,belt_ratio,TURNS, waitfordone)\n\ndef belt_spin_hooks(hooks = 1, waitfordone = True):\n    # note: must first fix wrong cartride for belt\n    belt_ratio = ((hooks * CONVEYOR_SPACING) / CONVEYOR_BIG_TEETH)\n    beltmotor.set_velocity(85,PERCENT)\n    beltmotor.spin_for(FORWARD,belt_ratio,TURNS, waitfordone)\n\ndef left_turn_adjust(turn_in):\n    return turn_in\n\ndef right_turn_adjust(turn_in):\n    return turn_in\n\ndef lower_arm(angle1):\n    armmotor.set_velocity(100,PERCENT)\n    armmotor.spin_for(REVERSE,6*angle1,DEGREES)\n    armmotor.stop()\n\nAUTON_SKILLS = 1\nAUTON_MATCH_LEFT = 2\nAUTON_MATCH_RIGHT = 3\nAUTON_MATCH_NONE = 4\n\nWHICH_AUTON = AUTON_SKILLS\n\ndef autonomous():\n    if WHICH_AUTON == AUTON_SKILLS:\n        autonomous_skills()\n    elif WHICH_AUTON == AUTON_MATCH_LEFT:\n        autonomous_match_left()\n    elif WHICH_AUTON == AUTON_MATCH_RIGHT:\n        autonomous_match_right()\n    else:\n        autonomous_none()\n\ndef autonomous_none():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    drivetrain.drive_for(REVERSE, 8, INCHES)\n    drivetrain.stop()\n    brain.screen.print(\"autonomous done\")\n\ndef autonomous_match_left():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n\n    raise_catch()\n    drivetrain.set_stopping(COAST) #softer stop\n    drivetrain.set_drive_velocity(65, PERCENT)\n    drivetrain.drive_for(REVERSE, 33, INCHES)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.set_drive_velocity(25, PERCENT)\n    drivetrain.drive_for(REVERSE, 8, INCHES)\n    lower_catch()\n    belt_spin_one_loop(False)\n    drivetrain.turn_for(RIGHT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 11.5, INCHES)\n    drivetrain.stop()\n\n\n    brain.screen.print(\"autonomous done\")\n\ndef autonomous_match_right():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n    raise_catch()\n    drivetrain.set_stopping(COAST) #softer stop\n    drivetrain.set_drive_velocity(65, PERCENT)\n    drivetrain.drive_for(REVERSE, 33, INCHES)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.set_drive_velocity(25, PERCENT)\n    drivetrain.drive_for(REVERSE, 8, INCHES)\n    lower_catch()\n    belt_spin_one_loop(False)\n    drivetrain.turn_for(LEFT, 90, DEGREES)\n    drivetrain.drive_for(FORWARD, 11.5, INCHES)\n    drivetrain.stop()\n\n\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous done\")\n    \ndef autonomous_skills():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n    #preload in + catching mobile goal\n\n    ## ------- FIRST MOBILE GOAL --------- ##\n\n    # initial reverse from wall\n    drivetrain.set_stopping(COAST) #softer stop\n    drivetrain.set_drive_velocity(33, PERCENT)\n    raise_catch()\n    drivetrain.drive_for(REVERSE, 14.5, INCHES) ## - changed: move back just a little more\n    \n    # point catch towards goal and reverse\n    wait(0.1,SECONDS) # after drive - short pause before turning to let things settle\n    drivetrain.turn_for(LEFT, 90, DEGREES) # first turn seems very picky 90 * left_turn_adjust\n    left_drive_smart.spin_for(FORWARD,24,DEGREES) # small nudge\n    drivetrain.set_drive_velocity(25, PERCENT)\n    \n    drivetrain.drive_for(REVERSE, 19,INCHES)\n    \n    lower_catch()\n    belt_spin_to_first(1, 3, False) # we are one hook and 3 chain links into full loop\n\n    ## ------- FIRST FLOOR DONUT --------- ##\n\n    # turn around and drive towards first donut\n    drivetrain.set_drive_velocity(33, PERCENT)\n    drivetrain.set_heading(270,DEGREES)\n    drivetrain.turn_for(LEFT, left_turn_adjust(180), DEGREES) # left_180_loaded * left_turn_adjust\n    left_drive_smart.spin_for(FORWARD,12,DEGREES)\n    drivetrain.drive_for(FORWARD, 20, INCHES)\n\n    # pickup donut\n    belt_spin_one_loop()\n\n    ## ------- SECOND FLOOR DONUT --------- ##\n\n    # second donut\n    drivetrain.set_drive_velocity(33, PERCENT)\n    drivetrain.drive_for(FORWARD, 14, INCHES)\n    drivetrain.set_drive_velocity(33, PERCENT)\n\n    # intake\n    belt_spin_hooks(2)\n    # start moving while we complete loading\n    # -- old belt_spin_to_first(2,0,False)\n    belt_spin_one_loop(False) # this is more reliable in case intake doesn't work first time\n\n    ## ------- PLACE MOBILE GOAL --------- ##\n\n    # point goal towards corner and reverse in\n    wait(0.1,SECONDS)\n    drivetrain.set_heading(270.0, DEGREES)\n    drivetrain.turn_for(RIGHT,right_turn_adjust(90),DEGREES)\n    right_drive_smart.spin_for(FORWARD, 24, DEGREES)\n    \n    drivetrain.drive_for(REVERSE, 6, INCHES)\n    # drivetrain.drive_for(FORWARD, 1, INCHES)\n\n    wait(0.1, SECONDS)\n    drivetrain.turn_for(RIGHT, right_turn_adjust (37.5), DEGREES)\n    right_drive_smart.spin_for(FORWARD, 24, DEGREES)\n    raise_catch()\n    drivetrain.drive_for(FORWARD, 6, INCHES)\n    lower_catch()\n    drivetrain.drive_for(REVERSE, 10, INCHES)\n    drivetrain.drive_for(FORWARD, 9, INCHES) ## -- changed: make sure we're properly in the center\n\n    # should now be back at the tile intersection\n    # turn and drive to next mogo\n    wait(0.1,SECONDS)\n    drivetrain.turn_to_heading(90, DEGREES)\n    right_drive_smart.spin_for(FORWARD,24,DEGREES)\n    drivetrain.set_drive_velocity(50, PERCENT)\n    belt_spin_to_first(2,0,False) # -- new: need to add spin to get to first hook\n    drivetrain.drive_for(FORWARD, 47+5, INCHES) # -- changed: make sure we're at the center\n\n    ## ------- HALF WAY --------- ##\n\n    # while not controller_1.buttonX.pressing():\n    #    wait(0.01, SECONDS)\n\n    ## ------- SECOND MOBILE GOAL --------- ##\n\n    drivetrain.set_drive_velocity(33, PERCENT)\n    drivetrain.set_heading(0, DEGREES)\n    wait(0.1, SECONDS)\n    drivetrain.turn_for(LEFT, 180, DEGREES) # left_180_loaded * left_turn_adjust\n    raise_catch()\n    drivetrain.set_drive_velocity(25, PERCENT)\n    right_drive_smart.spin_for(REVERSE, 24, DEGREES)\n    drivetrain.drive_for(REVERSE, 20, INCHES)\n    lower_catch()\n    drivetrain.set_drive_velocity(33, PERCENT)\n\n    ## ------- THIRD DONUT --------- ##\n\n    # point towards next donut and drive towards it\n    drivetrain.turn_for(LEFT, 180, DEGREES) #left_180_loaded * left_turn_adjust\n    left_drive_smart.spin_for(FORWARD, 12, DEGREES)\n    drivetrain.drive_for(FORWARD, 22, INCHES)\n\n    # intake donut and then load on mogo\n    # pickup donut\n    belt_spin_one_loop()\n\n    ## ------- FOURTH DONUT --------- ##\n\n    # second donut on right\n    drivetrain.set_drive_velocity(33, PERCENT)\n    drivetrain.drive_for(FORWARD, 14, INCHES) # -- changed: was driving too far\n    drivetrain.set_drive_velocity(33, PERCENT)\n\n    # intake\n    belt_spin_hooks(2)\n    # start moving while we complete loading\n    belt_spin_one_loop(False) ## -- changed: more reliable\n\n    ## ------- SECOND MOBILE GOAL --------- ##\n\n    #turn so mogo is pointing towards corner and release it\n    wait(0.1, SECONDS)\n    drivetrain.set_heading(90.0, DEGREES)\n    drivetrain.turn_for(LEFT, left_turn_adjust(90), DEGREES)\n    #right_drive_smart.spin(FORWARD, 24, DEGREES)\n    # belt_spin_hooks(2, False) ## -- old: replaced with full spin above\n    drivetrain.drive_for(REVERSE, 6, INCHES)\n    wait(0.1, SECONDS)\n    drivetrain.turn_for(LEFT, left_turn_adjust(30), DEGREES)\n    right_drive_smart.spin_for(FORWARD, 24, DEGREES)\n    raise_catch()\n    drivetrain.drive_for(FORWARD, 6, INCHES)\n    lower_catch()\n    drivetrain.drive_for(REVERSE, 10, INCHES)\n    drivetrain.drive_for(FORWARD, 8, INCHES)\n\n    ## ------- DONE --------- ##\n\n    drivetrain.stop()\n\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous done\")\n    \n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()","textLanguage":"python","robotConfig":[{"port":[3,4,1,2,11],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"inertial","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"armmotor","leftDir":"false","right":"beltmotor","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[8],"name":"armmotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[7],"name":"beltmotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"CatchMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":3,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.60.0","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null},"target":"Physical"}